/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface RewardRouterV2Interface extends ethers.utils.Interface {
  functions: {
    "BASIS_POINTS_DIVISOR()": FunctionFragment;
    "acceptTransfer(address)": FunctionFragment;
    "batchCompoundForAccounts(address[])": FunctionFragment;
    "batchRestakeForAccounts(address[])": FunctionFragment;
    "batchStakeGmxForAccounts(address[],uint256[])": FunctionFragment;
    "bnGmx()": FunctionFragment;
    "bonusGmxTracker()": FunctionFragment;
    "claim()": FunctionFragment;
    "claimEsGmx()": FunctionFragment;
    "claimFees()": FunctionFragment;
    "compound()": FunctionFragment;
    "esGmx()": FunctionFragment;
    "extendedGmxTracker()": FunctionFragment;
    "externalHandler()": FunctionFragment;
    "feeGlpTracker()": FunctionFragment;
    "feeGmxTracker()": FunctionFragment;
    "glp()": FunctionFragment;
    "glpManager()": FunctionFragment;
    "glpVester()": FunctionFragment;
    "gmx()": FunctionFragment;
    "gmxVester()": FunctionFragment;
    "gov()": FunctionFragment;
    "govToken()": FunctionFragment;
    "handleRewards(bool,bool,bool,bool,bool,bool,bool)": FunctionFragment;
    "handleRewardsV2(address,bool,bool,bool,bool,bool,bool,bool)": FunctionFragment;
    "inRestakingMode()": FunctionFragment;
    "inStrictTransferMode()": FunctionFragment;
    "initialize(tuple)": FunctionFragment;
    "isInitialized()": FunctionFragment;
    "makeExternalCalls(address[],bytes[],address[],address[])": FunctionFragment;
    "maxBoostBasisPoints()": FunctionFragment;
    "mintAndStakeGlp(address,uint256,uint256,uint256)": FunctionFragment;
    "mintAndStakeGlpETH(uint256,uint256)": FunctionFragment;
    "multicall(bytes[])": FunctionFragment;
    "pendingReceivers(address)": FunctionFragment;
    "setGov(address)": FunctionFragment;
    "setGovToken(address)": FunctionFragment;
    "setInRestakingMode(bool)": FunctionFragment;
    "setInStrictTransferMode(bool)": FunctionFragment;
    "setMaxBoostBasisPoints(uint256)": FunctionFragment;
    "setVotingPowerType(uint8)": FunctionFragment;
    "signalTransfer(address)": FunctionFragment;
    "stakeEsGmx(uint256)": FunctionFragment;
    "stakeGmx(uint256)": FunctionFragment;
    "stakedGlpTracker()": FunctionFragment;
    "stakedGmxTracker()": FunctionFragment;
    "unstakeAndRedeemGlp(address,uint256,uint256,address)": FunctionFragment;
    "unstakeAndRedeemGlpETH(uint256,uint256,address)": FunctionFragment;
    "unstakeEsGmx(uint256)": FunctionFragment;
    "unstakeGmx(uint256)": FunctionFragment;
    "votingPowerType()": FunctionFragment;
    "weth()": FunctionFragment;
    "withdrawToken(address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "BASIS_POINTS_DIVISOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptTransfer",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "batchCompoundForAccounts",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchRestakeForAccounts",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchStakeGmxForAccounts",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "bnGmx", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "bonusGmxTracker",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "claim", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimEsGmx",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "claimFees", values?: undefined): string;
  encodeFunctionData(functionFragment: "compound", values?: undefined): string;
  encodeFunctionData(functionFragment: "esGmx", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "extendedGmxTracker",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "externalHandler",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeGlpTracker",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeGmxTracker",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "glp", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "glpManager",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "glpVester", values?: undefined): string;
  encodeFunctionData(functionFragment: "gmx", values?: undefined): string;
  encodeFunctionData(functionFragment: "gmxVester", values?: undefined): string;
  encodeFunctionData(functionFragment: "gov", values?: undefined): string;
  encodeFunctionData(functionFragment: "govToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "handleRewards",
    values: [boolean, boolean, boolean, boolean, boolean, boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "handleRewardsV2",
    values: [
      string,
      boolean,
      boolean,
      boolean,
      boolean,
      boolean,
      boolean,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "inRestakingMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "inStrictTransferMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      {
        weth: string;
        gmx: string;
        esGmx: string;
        bnGmx: string;
        glp: string;
        stakedGmxTracker: string;
        bonusGmxTracker: string;
        extendedGmxTracker: string;
        feeGmxTracker: string;
        feeGlpTracker: string;
        stakedGlpTracker: string;
        glpManager: string;
        gmxVester: string;
        glpVester: string;
        externalHandler: string;
        govToken: string;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "makeExternalCalls",
    values: [string[], BytesLike[], string[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "maxBoostBasisPoints",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintAndStakeGlp",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintAndStakeGlpETH",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingReceivers",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setGov", values: [string]): string;
  encodeFunctionData(functionFragment: "setGovToken", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setInRestakingMode",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setInStrictTransferMode",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxBoostBasisPoints",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setVotingPowerType",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "signalTransfer",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeEsGmx",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeGmx",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakedGlpTracker",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakedGmxTracker",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unstakeAndRedeemGlp",
    values: [string, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "unstakeAndRedeemGlpETH",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "unstakeEsGmx",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unstakeGmx",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "votingPowerType",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawToken",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "BASIS_POINTS_DIVISOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchCompoundForAccounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchRestakeForAccounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchStakeGmxForAccounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bnGmx", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bonusGmxTracker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimEsGmx", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimFees", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "compound", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "esGmx", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "extendedGmxTracker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "externalHandler",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeGlpTracker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeGmxTracker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "glp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "glpManager", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "glpVester", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gmx", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gmxVester", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gov", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "govToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "handleRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handleRewardsV2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "inRestakingMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "inStrictTransferMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makeExternalCalls",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxBoostBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintAndStakeGlp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintAndStakeGlpETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingReceivers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setGov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setGovToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInRestakingMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInStrictTransferMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxBoostBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVotingPowerType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signalTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stakeEsGmx", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakeGmx", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakedGlpTracker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakedGmxTracker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unstakeAndRedeemGlp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unstakeAndRedeemGlpETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unstakeEsGmx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unstakeGmx", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "votingPowerType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToken",
    data: BytesLike
  ): Result;

  events: {
    "StakeGlp(address,uint256)": EventFragment;
    "StakeGmx(address,address,uint256)": EventFragment;
    "UnstakeGlp(address,uint256)": EventFragment;
    "UnstakeGmx(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "StakeGlp"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeGmx"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnstakeGlp"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnstakeGmx"): EventFragment;
}

export class RewardRouterV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: RewardRouterV2Interface;

  functions: {
    BASIS_POINTS_DIVISOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    acceptTransfer(
      _sender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchCompoundForAccounts(
      _accounts: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchRestakeForAccounts(
      _accounts: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchStakeGmxForAccounts(
      _accounts: string[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    bnGmx(overrides?: CallOverrides): Promise<[string]>;

    bonusGmxTracker(overrides?: CallOverrides): Promise<[string]>;

    claim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimEsGmx(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimFees(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    compound(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    esGmx(overrides?: CallOverrides): Promise<[string]>;

    extendedGmxTracker(overrides?: CallOverrides): Promise<[string]>;

    externalHandler(overrides?: CallOverrides): Promise<[string]>;

    feeGlpTracker(overrides?: CallOverrides): Promise<[string]>;

    feeGmxTracker(overrides?: CallOverrides): Promise<[string]>;

    glp(overrides?: CallOverrides): Promise<[string]>;

    glpManager(overrides?: CallOverrides): Promise<[string]>;

    glpVester(overrides?: CallOverrides): Promise<[string]>;

    gmx(overrides?: CallOverrides): Promise<[string]>;

    gmxVester(overrides?: CallOverrides): Promise<[string]>;

    gov(overrides?: CallOverrides): Promise<[string]>;

    govToken(overrides?: CallOverrides): Promise<[string]>;

    handleRewards(
      _shouldClaimGmx: boolean,
      _shouldStakeGmx: boolean,
      _shouldClaimEsGmx: boolean,
      _shouldStakeEsGmx: boolean,
      _shouldStakeMultiplierPoints: boolean,
      _shouldClaimWeth: boolean,
      _shouldConvertWethToEth: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    handleRewardsV2(
      _gmxReceiver: string,
      _shouldClaimGmx: boolean,
      _shouldStakeGmx: boolean,
      _shouldClaimEsGmx: boolean,
      _shouldStakeEsGmx: boolean,
      _shouldStakeMultiplierPoints: boolean,
      _shouldClaimWeth: boolean,
      _shouldConvertWethToEth: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    inRestakingMode(overrides?: CallOverrides): Promise<[boolean]>;

    inStrictTransferMode(overrides?: CallOverrides): Promise<[boolean]>;

    initialize(
      _initializeParams: {
        weth: string;
        gmx: string;
        esGmx: string;
        bnGmx: string;
        glp: string;
        stakedGmxTracker: string;
        bonusGmxTracker: string;
        extendedGmxTracker: string;
        feeGmxTracker: string;
        feeGlpTracker: string;
        stakedGlpTracker: string;
        glpManager: string;
        gmxVester: string;
        glpVester: string;
        externalHandler: string;
        govToken: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    makeExternalCalls(
      externalCallTargets: string[],
      externalCallDataList: BytesLike[],
      refundTokens: string[],
      refundReceivers: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    maxBoostBasisPoints(overrides?: CallOverrides): Promise<[BigNumber]>;

    mintAndStakeGlp(
      _token: string,
      _amount: BigNumberish,
      _minUsdg: BigNumberish,
      _minGlp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintAndStakeGlpETH(
      _minUsdg: BigNumberish,
      _minGlp: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pendingReceivers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    setGov(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGovToken(
      _govToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setInRestakingMode(
      _inRestakingMode: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setInStrictTransferMode(
      _inStrictTransferMode: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxBoostBasisPoints(
      _maxBoostBasisPoints: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setVotingPowerType(
      _votingPowerType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    signalTransfer(
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakeEsGmx(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakeGmx(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakedGlpTracker(overrides?: CallOverrides): Promise<[string]>;

    stakedGmxTracker(overrides?: CallOverrides): Promise<[string]>;

    unstakeAndRedeemGlp(
      _tokenOut: string,
      _glpAmount: BigNumberish,
      _minOut: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unstakeAndRedeemGlpETH(
      _glpAmount: BigNumberish,
      _minOut: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unstakeEsGmx(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unstakeGmx(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    votingPowerType(overrides?: CallOverrides): Promise<[number]>;

    weth(overrides?: CallOverrides): Promise<[string]>;

    withdrawToken(
      _token: string,
      _account: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  BASIS_POINTS_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

  acceptTransfer(
    _sender: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchCompoundForAccounts(
    _accounts: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchRestakeForAccounts(
    _accounts: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchStakeGmxForAccounts(
    _accounts: string[],
    _amounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  bnGmx(overrides?: CallOverrides): Promise<string>;

  bonusGmxTracker(overrides?: CallOverrides): Promise<string>;

  claim(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimEsGmx(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimFees(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  compound(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  esGmx(overrides?: CallOverrides): Promise<string>;

  extendedGmxTracker(overrides?: CallOverrides): Promise<string>;

  externalHandler(overrides?: CallOverrides): Promise<string>;

  feeGlpTracker(overrides?: CallOverrides): Promise<string>;

  feeGmxTracker(overrides?: CallOverrides): Promise<string>;

  glp(overrides?: CallOverrides): Promise<string>;

  glpManager(overrides?: CallOverrides): Promise<string>;

  glpVester(overrides?: CallOverrides): Promise<string>;

  gmx(overrides?: CallOverrides): Promise<string>;

  gmxVester(overrides?: CallOverrides): Promise<string>;

  gov(overrides?: CallOverrides): Promise<string>;

  govToken(overrides?: CallOverrides): Promise<string>;

  handleRewards(
    _shouldClaimGmx: boolean,
    _shouldStakeGmx: boolean,
    _shouldClaimEsGmx: boolean,
    _shouldStakeEsGmx: boolean,
    _shouldStakeMultiplierPoints: boolean,
    _shouldClaimWeth: boolean,
    _shouldConvertWethToEth: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  handleRewardsV2(
    _gmxReceiver: string,
    _shouldClaimGmx: boolean,
    _shouldStakeGmx: boolean,
    _shouldClaimEsGmx: boolean,
    _shouldStakeEsGmx: boolean,
    _shouldStakeMultiplierPoints: boolean,
    _shouldClaimWeth: boolean,
    _shouldConvertWethToEth: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  inRestakingMode(overrides?: CallOverrides): Promise<boolean>;

  inStrictTransferMode(overrides?: CallOverrides): Promise<boolean>;

  initialize(
    _initializeParams: {
      weth: string;
      gmx: string;
      esGmx: string;
      bnGmx: string;
      glp: string;
      stakedGmxTracker: string;
      bonusGmxTracker: string;
      extendedGmxTracker: string;
      feeGmxTracker: string;
      feeGlpTracker: string;
      stakedGlpTracker: string;
      glpManager: string;
      gmxVester: string;
      glpVester: string;
      externalHandler: string;
      govToken: string;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isInitialized(overrides?: CallOverrides): Promise<boolean>;

  makeExternalCalls(
    externalCallTargets: string[],
    externalCallDataList: BytesLike[],
    refundTokens: string[],
    refundReceivers: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  maxBoostBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

  mintAndStakeGlp(
    _token: string,
    _amount: BigNumberish,
    _minUsdg: BigNumberish,
    _minGlp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintAndStakeGlpETH(
    _minUsdg: BigNumberish,
    _minGlp: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  multicall(
    data: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pendingReceivers(arg0: string, overrides?: CallOverrides): Promise<string>;

  setGov(
    _gov: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGovToken(
    _govToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setInRestakingMode(
    _inRestakingMode: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setInStrictTransferMode(
    _inStrictTransferMode: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxBoostBasisPoints(
    _maxBoostBasisPoints: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setVotingPowerType(
    _votingPowerType: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  signalTransfer(
    _receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakeEsGmx(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakeGmx(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakedGlpTracker(overrides?: CallOverrides): Promise<string>;

  stakedGmxTracker(overrides?: CallOverrides): Promise<string>;

  unstakeAndRedeemGlp(
    _tokenOut: string,
    _glpAmount: BigNumberish,
    _minOut: BigNumberish,
    _receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unstakeAndRedeemGlpETH(
    _glpAmount: BigNumberish,
    _minOut: BigNumberish,
    _receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unstakeEsGmx(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unstakeGmx(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  votingPowerType(overrides?: CallOverrides): Promise<number>;

  weth(overrides?: CallOverrides): Promise<string>;

  withdrawToken(
    _token: string,
    _account: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    BASIS_POINTS_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

    acceptTransfer(_sender: string, overrides?: CallOverrides): Promise<void>;

    batchCompoundForAccounts(
      _accounts: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    batchRestakeForAccounts(
      _accounts: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    batchStakeGmxForAccounts(
      _accounts: string[],
      _amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    bnGmx(overrides?: CallOverrides): Promise<string>;

    bonusGmxTracker(overrides?: CallOverrides): Promise<string>;

    claim(overrides?: CallOverrides): Promise<void>;

    claimEsGmx(overrides?: CallOverrides): Promise<void>;

    claimFees(overrides?: CallOverrides): Promise<void>;

    compound(overrides?: CallOverrides): Promise<void>;

    esGmx(overrides?: CallOverrides): Promise<string>;

    extendedGmxTracker(overrides?: CallOverrides): Promise<string>;

    externalHandler(overrides?: CallOverrides): Promise<string>;

    feeGlpTracker(overrides?: CallOverrides): Promise<string>;

    feeGmxTracker(overrides?: CallOverrides): Promise<string>;

    glp(overrides?: CallOverrides): Promise<string>;

    glpManager(overrides?: CallOverrides): Promise<string>;

    glpVester(overrides?: CallOverrides): Promise<string>;

    gmx(overrides?: CallOverrides): Promise<string>;

    gmxVester(overrides?: CallOverrides): Promise<string>;

    gov(overrides?: CallOverrides): Promise<string>;

    govToken(overrides?: CallOverrides): Promise<string>;

    handleRewards(
      _shouldClaimGmx: boolean,
      _shouldStakeGmx: boolean,
      _shouldClaimEsGmx: boolean,
      _shouldStakeEsGmx: boolean,
      _shouldStakeMultiplierPoints: boolean,
      _shouldClaimWeth: boolean,
      _shouldConvertWethToEth: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    handleRewardsV2(
      _gmxReceiver: string,
      _shouldClaimGmx: boolean,
      _shouldStakeGmx: boolean,
      _shouldClaimEsGmx: boolean,
      _shouldStakeEsGmx: boolean,
      _shouldStakeMultiplierPoints: boolean,
      _shouldClaimWeth: boolean,
      _shouldConvertWethToEth: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    inRestakingMode(overrides?: CallOverrides): Promise<boolean>;

    inStrictTransferMode(overrides?: CallOverrides): Promise<boolean>;

    initialize(
      _initializeParams: {
        weth: string;
        gmx: string;
        esGmx: string;
        bnGmx: string;
        glp: string;
        stakedGmxTracker: string;
        bonusGmxTracker: string;
        extendedGmxTracker: string;
        feeGmxTracker: string;
        feeGlpTracker: string;
        stakedGlpTracker: string;
        glpManager: string;
        gmxVester: string;
        glpVester: string;
        externalHandler: string;
        govToken: string;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    isInitialized(overrides?: CallOverrides): Promise<boolean>;

    makeExternalCalls(
      externalCallTargets: string[],
      externalCallDataList: BytesLike[],
      refundTokens: string[],
      refundReceivers: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    maxBoostBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    mintAndStakeGlp(
      _token: string,
      _amount: BigNumberish,
      _minUsdg: BigNumberish,
      _minGlp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintAndStakeGlpETH(
      _minUsdg: BigNumberish,
      _minGlp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    multicall(data: BytesLike[], overrides?: CallOverrides): Promise<string[]>;

    pendingReceivers(arg0: string, overrides?: CallOverrides): Promise<string>;

    setGov(_gov: string, overrides?: CallOverrides): Promise<void>;

    setGovToken(_govToken: string, overrides?: CallOverrides): Promise<void>;

    setInRestakingMode(
      _inRestakingMode: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setInStrictTransferMode(
      _inStrictTransferMode: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxBoostBasisPoints(
      _maxBoostBasisPoints: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setVotingPowerType(
      _votingPowerType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    signalTransfer(_receiver: string, overrides?: CallOverrides): Promise<void>;

    stakeEsGmx(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    stakeGmx(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    stakedGlpTracker(overrides?: CallOverrides): Promise<string>;

    stakedGmxTracker(overrides?: CallOverrides): Promise<string>;

    unstakeAndRedeemGlp(
      _tokenOut: string,
      _glpAmount: BigNumberish,
      _minOut: BigNumberish,
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unstakeAndRedeemGlpETH(
      _glpAmount: BigNumberish,
      _minOut: BigNumberish,
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unstakeEsGmx(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unstakeGmx(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    votingPowerType(overrides?: CallOverrides): Promise<number>;

    weth(overrides?: CallOverrides): Promise<string>;

    withdrawToken(
      _token: string,
      _account: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    StakeGlp(
      account?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { account: string; amount: BigNumber }
    >;

    StakeGmx(
      account?: null,
      token?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { account: string; token: string; amount: BigNumber }
    >;

    UnstakeGlp(
      account?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { account: string; amount: BigNumber }
    >;

    UnstakeGmx(
      account?: null,
      token?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { account: string; token: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    BASIS_POINTS_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

    acceptTransfer(
      _sender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchCompoundForAccounts(
      _accounts: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchRestakeForAccounts(
      _accounts: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchStakeGmxForAccounts(
      _accounts: string[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    bnGmx(overrides?: CallOverrides): Promise<BigNumber>;

    bonusGmxTracker(overrides?: CallOverrides): Promise<BigNumber>;

    claim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimEsGmx(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimFees(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    compound(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    esGmx(overrides?: CallOverrides): Promise<BigNumber>;

    extendedGmxTracker(overrides?: CallOverrides): Promise<BigNumber>;

    externalHandler(overrides?: CallOverrides): Promise<BigNumber>;

    feeGlpTracker(overrides?: CallOverrides): Promise<BigNumber>;

    feeGmxTracker(overrides?: CallOverrides): Promise<BigNumber>;

    glp(overrides?: CallOverrides): Promise<BigNumber>;

    glpManager(overrides?: CallOverrides): Promise<BigNumber>;

    glpVester(overrides?: CallOverrides): Promise<BigNumber>;

    gmx(overrides?: CallOverrides): Promise<BigNumber>;

    gmxVester(overrides?: CallOverrides): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<BigNumber>;

    govToken(overrides?: CallOverrides): Promise<BigNumber>;

    handleRewards(
      _shouldClaimGmx: boolean,
      _shouldStakeGmx: boolean,
      _shouldClaimEsGmx: boolean,
      _shouldStakeEsGmx: boolean,
      _shouldStakeMultiplierPoints: boolean,
      _shouldClaimWeth: boolean,
      _shouldConvertWethToEth: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    handleRewardsV2(
      _gmxReceiver: string,
      _shouldClaimGmx: boolean,
      _shouldStakeGmx: boolean,
      _shouldClaimEsGmx: boolean,
      _shouldStakeEsGmx: boolean,
      _shouldStakeMultiplierPoints: boolean,
      _shouldClaimWeth: boolean,
      _shouldConvertWethToEth: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    inRestakingMode(overrides?: CallOverrides): Promise<BigNumber>;

    inStrictTransferMode(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _initializeParams: {
        weth: string;
        gmx: string;
        esGmx: string;
        bnGmx: string;
        glp: string;
        stakedGmxTracker: string;
        bonusGmxTracker: string;
        extendedGmxTracker: string;
        feeGmxTracker: string;
        feeGlpTracker: string;
        stakedGlpTracker: string;
        glpManager: string;
        gmxVester: string;
        glpVester: string;
        externalHandler: string;
        govToken: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    makeExternalCalls(
      externalCallTargets: string[],
      externalCallDataList: BytesLike[],
      refundTokens: string[],
      refundReceivers: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    maxBoostBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    mintAndStakeGlp(
      _token: string,
      _amount: BigNumberish,
      _minUsdg: BigNumberish,
      _minGlp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintAndStakeGlpETH(
      _minUsdg: BigNumberish,
      _minGlp: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pendingReceivers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setGov(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGovToken(
      _govToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setInRestakingMode(
      _inRestakingMode: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setInStrictTransferMode(
      _inStrictTransferMode: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxBoostBasisPoints(
      _maxBoostBasisPoints: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setVotingPowerType(
      _votingPowerType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    signalTransfer(
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakeEsGmx(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakeGmx(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakedGlpTracker(overrides?: CallOverrides): Promise<BigNumber>;

    stakedGmxTracker(overrides?: CallOverrides): Promise<BigNumber>;

    unstakeAndRedeemGlp(
      _tokenOut: string,
      _glpAmount: BigNumberish,
      _minOut: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unstakeAndRedeemGlpETH(
      _glpAmount: BigNumberish,
      _minOut: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unstakeEsGmx(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unstakeGmx(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    votingPowerType(overrides?: CallOverrides): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawToken(
      _token: string,
      _account: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BASIS_POINTS_DIVISOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    acceptTransfer(
      _sender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchCompoundForAccounts(
      _accounts: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchRestakeForAccounts(
      _accounts: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchStakeGmxForAccounts(
      _accounts: string[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    bnGmx(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bonusGmxTracker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimEsGmx(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimFees(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    compound(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    esGmx(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    extendedGmxTracker(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    externalHandler(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeGlpTracker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeGmxTracker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    glp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    glpManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    glpVester(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gmx(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gmxVester(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gov(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    govToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    handleRewards(
      _shouldClaimGmx: boolean,
      _shouldStakeGmx: boolean,
      _shouldClaimEsGmx: boolean,
      _shouldStakeEsGmx: boolean,
      _shouldStakeMultiplierPoints: boolean,
      _shouldClaimWeth: boolean,
      _shouldConvertWethToEth: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    handleRewardsV2(
      _gmxReceiver: string,
      _shouldClaimGmx: boolean,
      _shouldStakeGmx: boolean,
      _shouldClaimEsGmx: boolean,
      _shouldStakeEsGmx: boolean,
      _shouldStakeMultiplierPoints: boolean,
      _shouldClaimWeth: boolean,
      _shouldConvertWethToEth: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    inRestakingMode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    inStrictTransferMode(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _initializeParams: {
        weth: string;
        gmx: string;
        esGmx: string;
        bnGmx: string;
        glp: string;
        stakedGmxTracker: string;
        bonusGmxTracker: string;
        extendedGmxTracker: string;
        feeGmxTracker: string;
        feeGlpTracker: string;
        stakedGlpTracker: string;
        glpManager: string;
        gmxVester: string;
        glpVester: string;
        externalHandler: string;
        govToken: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    makeExternalCalls(
      externalCallTargets: string[],
      externalCallDataList: BytesLike[],
      refundTokens: string[],
      refundReceivers: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    maxBoostBasisPoints(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintAndStakeGlp(
      _token: string,
      _amount: BigNumberish,
      _minUsdg: BigNumberish,
      _minGlp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintAndStakeGlpETH(
      _minUsdg: BigNumberish,
      _minGlp: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pendingReceivers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setGov(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGovToken(
      _govToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setInRestakingMode(
      _inRestakingMode: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setInStrictTransferMode(
      _inStrictTransferMode: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxBoostBasisPoints(
      _maxBoostBasisPoints: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setVotingPowerType(
      _votingPowerType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    signalTransfer(
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakeEsGmx(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakeGmx(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakedGlpTracker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakedGmxTracker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unstakeAndRedeemGlp(
      _tokenOut: string,
      _glpAmount: BigNumberish,
      _minOut: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unstakeAndRedeemGlpETH(
      _glpAmount: BigNumberish,
      _minOut: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unstakeEsGmx(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unstakeGmx(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    votingPowerType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawToken(
      _token: string,
      _account: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
