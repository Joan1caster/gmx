/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface MockPythInterface extends ethers.utils.Interface {
  functions: {
    "exponents(bytes32)": FunctionFragment;
    "getPrice(bytes32)": FunctionFragment;
    "getUpdateFee(bytes[])": FunctionFragment;
    "prices(bytes32)": FunctionFragment;
    "publishTimes(bytes32)": FunctionFragment;
    "setPrice(bytes32,int64,int32,uint256)": FunctionFragment;
    "updatePriceFeeds(bytes[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "exponents",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "getPrice", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getUpdateFee",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "prices", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "publishTimes",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPrice",
    values: [BytesLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePriceFeeds",
    values: [BytesLike[]]
  ): string;

  decodeFunctionResult(functionFragment: "exponents", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUpdateFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "prices", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "publishTimes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updatePriceFeeds",
    data: BytesLike
  ): Result;

  events: {};
}

export class MockPyth extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MockPythInterface;

  functions: {
    exponents(arg0: BytesLike, overrides?: CallOverrides): Promise<[number]>;

    getPrice(
      id: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, number, BigNumber] & {
          price: BigNumber;
          conf: BigNumber;
          expo: number;
          publishTime: BigNumber;
        }
      ] & {
        price: [BigNumber, BigNumber, number, BigNumber] & {
          price: BigNumber;
          conf: BigNumber;
          expo: number;
          publishTime: BigNumber;
        };
      }
    >;

    getUpdateFee(
      arg0: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { feeAmount: BigNumber }>;

    prices(arg0: BytesLike, overrides?: CallOverrides): Promise<[BigNumber]>;

    publishTimes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setPrice(
      id: BytesLike,
      price: BigNumberish,
      expo: BigNumberish,
      publishTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePriceFeeds(
      arg0: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  exponents(arg0: BytesLike, overrides?: CallOverrides): Promise<number>;

  getPrice(
    id: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, number, BigNumber] & {
      price: BigNumber;
      conf: BigNumber;
      expo: number;
      publishTime: BigNumber;
    }
  >;

  getUpdateFee(
    arg0: BytesLike[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  prices(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  publishTimes(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  setPrice(
    id: BytesLike,
    price: BigNumberish,
    expo: BigNumberish,
    publishTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePriceFeeds(
    arg0: BytesLike[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    exponents(arg0: BytesLike, overrides?: CallOverrides): Promise<number>;

    getPrice(
      id: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number, BigNumber] & {
        price: BigNumber;
        conf: BigNumber;
        expo: number;
        publishTime: BigNumber;
      }
    >;

    getUpdateFee(
      arg0: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    prices(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    publishTimes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setPrice(
      id: BytesLike,
      price: BigNumberish,
      expo: BigNumberish,
      publishTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePriceFeeds(
      arg0: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    exponents(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    getPrice(id: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    getUpdateFee(
      arg0: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    prices(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    publishTimes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setPrice(
      id: BytesLike,
      price: BigNumberish,
      expo: BigNumberish,
      publishTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePriceFeeds(
      arg0: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    exponents(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPrice(
      id: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUpdateFee(
      arg0: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    prices(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    publishTimes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setPrice(
      id: BytesLike,
      price: BigNumberish,
      expo: BigNumberish,
      publishTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePriceFeeds(
      arg0: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
