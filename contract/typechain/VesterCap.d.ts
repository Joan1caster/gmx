/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface VesterCapInterface extends ethers.utils.Interface {
  functions: {
    "BASIS_POINTS_DIVISOR()": FunctionFragment;
    "bnGmx()": FunctionFragment;
    "bnGmxToEsGmxConversionDivisor()": FunctionFragment;
    "bonusGmxTracker()": FunctionFragment;
    "esGmx()": FunctionFragment;
    "extendedGmxTracker()": FunctionFragment;
    "feeGmxTracker()": FunctionFragment;
    "gmxVester()": FunctionFragment;
    "gov()": FunctionFragment;
    "isUpdateCompleted(address)": FunctionFragment;
    "maxBoostBasisPoints()": FunctionFragment;
    "setGov(address)": FunctionFragment;
    "stakedGmxTracker()": FunctionFragment;
    "syncFeeGmxTrackerBalance(address)": FunctionFragment;
    "updateBnGmxForAccounts(address[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "BASIS_POINTS_DIVISOR",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "bnGmx", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "bnGmxToEsGmxConversionDivisor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bonusGmxTracker",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "esGmx", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "extendedGmxTracker",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeGmxTracker",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "gmxVester", values?: undefined): string;
  encodeFunctionData(functionFragment: "gov", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isUpdateCompleted",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "maxBoostBasisPoints",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setGov", values: [string]): string;
  encodeFunctionData(
    functionFragment: "stakedGmxTracker",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "syncFeeGmxTrackerBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBnGmxForAccounts",
    values: [string[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "BASIS_POINTS_DIVISOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bnGmx", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bnGmxToEsGmxConversionDivisor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bonusGmxTracker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "esGmx", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "extendedGmxTracker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeGmxTracker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gmxVester", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isUpdateCompleted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxBoostBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setGov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakedGmxTracker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "syncFeeGmxTrackerBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBnGmxForAccounts",
    data: BytesLike
  ): Result;

  events: {};
}

export class VesterCap extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: VesterCapInterface;

  functions: {
    BASIS_POINTS_DIVISOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    bnGmx(overrides?: CallOverrides): Promise<[string]>;

    bnGmxToEsGmxConversionDivisor(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    bonusGmxTracker(overrides?: CallOverrides): Promise<[string]>;

    esGmx(overrides?: CallOverrides): Promise<[string]>;

    extendedGmxTracker(overrides?: CallOverrides): Promise<[string]>;

    feeGmxTracker(overrides?: CallOverrides): Promise<[string]>;

    gmxVester(overrides?: CallOverrides): Promise<[string]>;

    gov(overrides?: CallOverrides): Promise<[string]>;

    isUpdateCompleted(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    maxBoostBasisPoints(overrides?: CallOverrides): Promise<[BigNumber]>;

    setGov(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakedGmxTracker(overrides?: CallOverrides): Promise<[string]>;

    syncFeeGmxTrackerBalance(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateBnGmxForAccounts(
      _accounts: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  BASIS_POINTS_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

  bnGmx(overrides?: CallOverrides): Promise<string>;

  bnGmxToEsGmxConversionDivisor(overrides?: CallOverrides): Promise<BigNumber>;

  bonusGmxTracker(overrides?: CallOverrides): Promise<string>;

  esGmx(overrides?: CallOverrides): Promise<string>;

  extendedGmxTracker(overrides?: CallOverrides): Promise<string>;

  feeGmxTracker(overrides?: CallOverrides): Promise<string>;

  gmxVester(overrides?: CallOverrides): Promise<string>;

  gov(overrides?: CallOverrides): Promise<string>;

  isUpdateCompleted(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  maxBoostBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

  setGov(
    _gov: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakedGmxTracker(overrides?: CallOverrides): Promise<string>;

  syncFeeGmxTrackerBalance(
    _account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateBnGmxForAccounts(
    _accounts: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    BASIS_POINTS_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

    bnGmx(overrides?: CallOverrides): Promise<string>;

    bnGmxToEsGmxConversionDivisor(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bonusGmxTracker(overrides?: CallOverrides): Promise<string>;

    esGmx(overrides?: CallOverrides): Promise<string>;

    extendedGmxTracker(overrides?: CallOverrides): Promise<string>;

    feeGmxTracker(overrides?: CallOverrides): Promise<string>;

    gmxVester(overrides?: CallOverrides): Promise<string>;

    gov(overrides?: CallOverrides): Promise<string>;

    isUpdateCompleted(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    maxBoostBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    setGov(_gov: string, overrides?: CallOverrides): Promise<void>;

    stakedGmxTracker(overrides?: CallOverrides): Promise<string>;

    syncFeeGmxTrackerBalance(
      _account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateBnGmxForAccounts(
      _accounts: string[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    BASIS_POINTS_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

    bnGmx(overrides?: CallOverrides): Promise<BigNumber>;

    bnGmxToEsGmxConversionDivisor(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bonusGmxTracker(overrides?: CallOverrides): Promise<BigNumber>;

    esGmx(overrides?: CallOverrides): Promise<BigNumber>;

    extendedGmxTracker(overrides?: CallOverrides): Promise<BigNumber>;

    feeGmxTracker(overrides?: CallOverrides): Promise<BigNumber>;

    gmxVester(overrides?: CallOverrides): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<BigNumber>;

    isUpdateCompleted(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxBoostBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    setGov(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakedGmxTracker(overrides?: CallOverrides): Promise<BigNumber>;

    syncFeeGmxTrackerBalance(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateBnGmxForAccounts(
      _accounts: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BASIS_POINTS_DIVISOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bnGmx(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bnGmxToEsGmxConversionDivisor(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bonusGmxTracker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    esGmx(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    extendedGmxTracker(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeGmxTracker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gmxVester(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gov(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isUpdateCompleted(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxBoostBasisPoints(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setGov(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakedGmxTracker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    syncFeeGmxTrackerBalance(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateBnGmxForAccounts(
      _accounts: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
